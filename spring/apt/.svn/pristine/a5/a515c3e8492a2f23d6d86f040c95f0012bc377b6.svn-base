//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.2-hudson-jaxb-ri-2.2-63- 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2013.10.29 at 05:09:52 \uc624\ud6c4 KST 
//


package net.ion.open.oadr2.model.v20b.greenbutton;

import java.io.Serializable;
import java.util.Collection;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * Characteristics associated with all Readings included in a MeterReading.
 * 
 * <p>Java class for ReadingType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="ReadingType">
 *   &lt;complexContent>
 *     &lt;extension base="{http://naesb.org/espi}IdentifiedObject">
 *       &lt;sequence>
 *         &lt;element name="accumulationBehaviour" type="{http://naesb.org/espi}AccumulationKind" minOccurs="0"/>
 *         &lt;element name="commodity" type="{http://naesb.org/espi}CommodityKind" minOccurs="0"/>
 *         &lt;element name="consumptionTier" type="{http://naesb.org/espi}Int16" minOccurs="0"/>
 *         &lt;element name="currency" type="{http://naesb.org/espi}Currency" minOccurs="0"/>
 *         &lt;element name="dataQualifier" type="{http://naesb.org/espi}DataQualifierKind" minOccurs="0"/>
 *         &lt;element name="defaultQuality" type="{http://naesb.org/espi}QualityOfReading" minOccurs="0"/>
 *         &lt;element name="flowDirection" type="{http://naesb.org/espi}FlowDirectionKind" minOccurs="0"/>
 *         &lt;element name="intervalLength" type="{http://naesb.org/espi}UInt32" minOccurs="0"/>
 *         &lt;element name="kind" type="{http://naesb.org/espi}MeasurementKind" minOccurs="0"/>
 *         &lt;element name="phase" type="{http://naesb.org/espi}PhaseCodeKind" minOccurs="0"/>
 *         &lt;element name="powerOfTenMultiplier" type="{http://naesb.org/espi}UnitMultiplierKind" minOccurs="0"/>
 *         &lt;element name="timeAttribute" type="{http://naesb.org/espi}TimePeriodOfInterest" minOccurs="0"/>
 *         &lt;element name="tou" type="{http://naesb.org/espi}Int16" minOccurs="0"/>
 *         &lt;element name="uom" type="{http://naesb.org/espi}UnitSymbolKind" minOccurs="0"/>
 *         &lt;element name="cpp" type="{http://naesb.org/espi}Int16" minOccurs="0"/>
 *         &lt;element name="interharmonic" type="{http://naesb.org/espi}ReadingInterharmonic" minOccurs="0"/>
 *         &lt;element name="measuringPeriod" type="{http://naesb.org/espi}TimeAttributeKind" minOccurs="0"/>
 *         &lt;element name="argument" type="{http://naesb.org/espi}RationalNumber" minOccurs="0"/>
 *       &lt;/sequence>
 *     &lt;/extension>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "ReadingType", propOrder = {
    "accumulationBehaviour",
    "commodity",
    "consumptionTier",
    "currency",
    "dataQualifier",
    "defaultQuality",
    "flowDirection",
    "intervalLength",
    "kind",
    "phase",
    "powerOfTenMultiplier",
    "timeAttribute",
    "tou",
    "uom",
    "cpp",
    "interharmonic",
    "measuringPeriod",
    "argument"
})
@XmlRootElement(name = "ReadingType")
public class ReadingType
    extends IdentifiedObject
    implements Serializable, Equals, HashCode, ToString
{

    private final static long serialVersionUID = 1L;
    protected String accumulationBehaviour;
    protected String commodity;
    protected Short consumptionTier;
    protected String currency;
    protected String dataQualifier;
    protected String defaultQuality;
    protected String flowDirection;
    protected Long intervalLength;
    protected String kind;
    protected String phase;
    protected String powerOfTenMultiplier;
    protected String timeAttribute;
    protected Short tou;
    protected String uom;
    protected Short cpp;
    protected ReadingInterharmonic interharmonic;
    protected String measuringPeriod;
    protected RationalNumber argument;

    /**
     * Default no-arg constructor
     * 
     */
    public ReadingType() {
        super();
    }

    /**
     * Fully-initialising value constructor
     * 
     */
    public ReadingType(final List<java.lang.Object> extensions, final BatchItemInfo batchItemInfo, final String accumulationBehaviour, final String commodity, final Short consumptionTier, final String currency, final String dataQualifier, final String defaultQuality, final String flowDirection, final Long intervalLength, final String kind, final String phase, final String powerOfTenMultiplier, final String timeAttribute, final Short tou, final String uom, final Short cpp, final ReadingInterharmonic interharmonic, final String measuringPeriod, final RationalNumber argument) {
        super(extensions, batchItemInfo);
        this.accumulationBehaviour = accumulationBehaviour;
        this.commodity = commodity;
        this.consumptionTier = consumptionTier;
        this.currency = currency;
        this.dataQualifier = dataQualifier;
        this.defaultQuality = defaultQuality;
        this.flowDirection = flowDirection;
        this.intervalLength = intervalLength;
        this.kind = kind;
        this.phase = phase;
        this.powerOfTenMultiplier = powerOfTenMultiplier;
        this.timeAttribute = timeAttribute;
        this.tou = tou;
        this.uom = uom;
        this.cpp = cpp;
        this.interharmonic = interharmonic;
        this.measuringPeriod = measuringPeriod;
        this.argument = argument;
    }

    /**
     * Gets the value of the accumulationBehaviour property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getAccumulationBehaviour() {
        return accumulationBehaviour;
    }

    /**
     * Sets the value of the accumulationBehaviour property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setAccumulationBehaviour(String value) {
        this.accumulationBehaviour = value;
    }

    /**
     * Gets the value of the commodity property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getCommodity() {
        return commodity;
    }

    /**
     * Sets the value of the commodity property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setCommodity(String value) {
        this.commodity = value;
    }

    /**
     * Gets the value of the consumptionTier property.
     * 
     * @return
     *     possible object is
     *     {@link Short }
     *     
     */
    public Short getConsumptionTier() {
        return consumptionTier;
    }

    /**
     * Sets the value of the consumptionTier property.
     * 
     * @param value
     *     allowed object is
     *     {@link Short }
     *     
     */
    public void setConsumptionTier(Short value) {
        this.consumptionTier = value;
    }

    /**
     * Gets the value of the currency property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getCurrency() {
        return currency;
    }

    /**
     * Sets the value of the currency property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setCurrency(String value) {
        this.currency = value;
    }

    /**
     * Gets the value of the dataQualifier property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getDataQualifier() {
        return dataQualifier;
    }

    /**
     * Sets the value of the dataQualifier property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setDataQualifier(String value) {
        this.dataQualifier = value;
    }

    /**
     * Gets the value of the defaultQuality property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getDefaultQuality() {
        return defaultQuality;
    }

    /**
     * Sets the value of the defaultQuality property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setDefaultQuality(String value) {
        this.defaultQuality = value;
    }

    /**
     * Gets the value of the flowDirection property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getFlowDirection() {
        return flowDirection;
    }

    /**
     * Sets the value of the flowDirection property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setFlowDirection(String value) {
        this.flowDirection = value;
    }

    /**
     * Gets the value of the intervalLength property.
     * 
     * @return
     *     possible object is
     *     {@link Long }
     *     
     */
    public Long getIntervalLength() {
        return intervalLength;
    }

    /**
     * Sets the value of the intervalLength property.
     * 
     * @param value
     *     allowed object is
     *     {@link Long }
     *     
     */
    public void setIntervalLength(Long value) {
        this.intervalLength = value;
    }

    /**
     * Gets the value of the kind property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getKind() {
        return kind;
    }

    /**
     * Sets the value of the kind property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setKind(String value) {
        this.kind = value;
    }

    /**
     * Gets the value of the phase property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getPhase() {
        return phase;
    }

    /**
     * Sets the value of the phase property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setPhase(String value) {
        this.phase = value;
    }

    /**
     * Gets the value of the powerOfTenMultiplier property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getPowerOfTenMultiplier() {
        return powerOfTenMultiplier;
    }

    /**
     * Sets the value of the powerOfTenMultiplier property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setPowerOfTenMultiplier(String value) {
        this.powerOfTenMultiplier = value;
    }

    /**
     * Gets the value of the timeAttribute property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getTimeAttribute() {
        return timeAttribute;
    }

    /**
     * Sets the value of the timeAttribute property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setTimeAttribute(String value) {
        this.timeAttribute = value;
    }

    /**
     * Gets the value of the tou property.
     * 
     * @return
     *     possible object is
     *     {@link Short }
     *     
     */
    public Short getTou() {
        return tou;
    }

    /**
     * Sets the value of the tou property.
     * 
     * @param value
     *     allowed object is
     *     {@link Short }
     *     
     */
    public void setTou(Short value) {
        this.tou = value;
    }

    /**
     * Gets the value of the uom property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getUom() {
        return uom;
    }

    /**
     * Sets the value of the uom property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setUom(String value) {
        this.uom = value;
    }

    /**
     * Gets the value of the cpp property.
     * 
     * @return
     *     possible object is
     *     {@link Short }
     *     
     */
    public Short getCpp() {
        return cpp;
    }

    /**
     * Sets the value of the cpp property.
     * 
     * @param value
     *     allowed object is
     *     {@link Short }
     *     
     */
    public void setCpp(Short value) {
        this.cpp = value;
    }

    /**
     * Gets the value of the interharmonic property.
     * 
     * @return
     *     possible object is
     *     {@link ReadingInterharmonic }
     *     
     */
    public ReadingInterharmonic getInterharmonic() {
        return interharmonic;
    }

    /**
     * Sets the value of the interharmonic property.
     * 
     * @param value
     *     allowed object is
     *     {@link ReadingInterharmonic }
     *     
     */
    public void setInterharmonic(ReadingInterharmonic value) {
        this.interharmonic = value;
    }

    /**
     * Gets the value of the measuringPeriod property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getMeasuringPeriod() {
        return measuringPeriod;
    }

    /**
     * Sets the value of the measuringPeriod property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setMeasuringPeriod(String value) {
        this.measuringPeriod = value;
    }

    /**
     * Gets the value of the argument property.
     * 
     * @return
     *     possible object is
     *     {@link RationalNumber }
     *     
     */
    public RationalNumber getArgument() {
        return argument;
    }

    /**
     * Sets the value of the argument property.
     * 
     * @param value
     *     allowed object is
     *     {@link RationalNumber }
     *     
     */
    public void setArgument(RationalNumber value) {
        this.argument = value;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        super.appendFields(locator, buffer, strategy);
        {
            String theAccumulationBehaviour;
            theAccumulationBehaviour = this.getAccumulationBehaviour();
            strategy.appendField(locator, this, "accumulationBehaviour", buffer, theAccumulationBehaviour);
        }
        {
            String theCommodity;
            theCommodity = this.getCommodity();
            strategy.appendField(locator, this, "commodity", buffer, theCommodity);
        }
        {
            Short theConsumptionTier;
            theConsumptionTier = this.getConsumptionTier();
            strategy.appendField(locator, this, "consumptionTier", buffer, theConsumptionTier);
        }
        {
            String theCurrency;
            theCurrency = this.getCurrency();
            strategy.appendField(locator, this, "currency", buffer, theCurrency);
        }
        {
            String theDataQualifier;
            theDataQualifier = this.getDataQualifier();
            strategy.appendField(locator, this, "dataQualifier", buffer, theDataQualifier);
        }
        {
            String theDefaultQuality;
            theDefaultQuality = this.getDefaultQuality();
            strategy.appendField(locator, this, "defaultQuality", buffer, theDefaultQuality);
        }
        {
            String theFlowDirection;
            theFlowDirection = this.getFlowDirection();
            strategy.appendField(locator, this, "flowDirection", buffer, theFlowDirection);
        }
        {
            Long theIntervalLength;
            theIntervalLength = this.getIntervalLength();
            strategy.appendField(locator, this, "intervalLength", buffer, theIntervalLength);
        }
        {
            String theKind;
            theKind = this.getKind();
            strategy.appendField(locator, this, "kind", buffer, theKind);
        }
        {
            String thePhase;
            thePhase = this.getPhase();
            strategy.appendField(locator, this, "phase", buffer, thePhase);
        }
        {
            String thePowerOfTenMultiplier;
            thePowerOfTenMultiplier = this.getPowerOfTenMultiplier();
            strategy.appendField(locator, this, "powerOfTenMultiplier", buffer, thePowerOfTenMultiplier);
        }
        {
            String theTimeAttribute;
            theTimeAttribute = this.getTimeAttribute();
            strategy.appendField(locator, this, "timeAttribute", buffer, theTimeAttribute);
        }
        {
            Short theTou;
            theTou = this.getTou();
            strategy.appendField(locator, this, "tou", buffer, theTou);
        }
        {
            String theUom;
            theUom = this.getUom();
            strategy.appendField(locator, this, "uom", buffer, theUom);
        }
        {
            Short theCpp;
            theCpp = this.getCpp();
            strategy.appendField(locator, this, "cpp", buffer, theCpp);
        }
        {
            ReadingInterharmonic theInterharmonic;
            theInterharmonic = this.getInterharmonic();
            strategy.appendField(locator, this, "interharmonic", buffer, theInterharmonic);
        }
        {
            String theMeasuringPeriod;
            theMeasuringPeriod = this.getMeasuringPeriod();
            strategy.appendField(locator, this, "measuringPeriod", buffer, theMeasuringPeriod);
        }
        {
            RationalNumber theArgument;
            theArgument = this.getArgument();
            strategy.appendField(locator, this, "argument", buffer, theArgument);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, java.lang.Object object, EqualsStrategy strategy) {
        if (!(object instanceof ReadingType)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final ReadingType that = ((ReadingType) object);
        {
            String lhsAccumulationBehaviour;
            lhsAccumulationBehaviour = this.getAccumulationBehaviour();
            String rhsAccumulationBehaviour;
            rhsAccumulationBehaviour = that.getAccumulationBehaviour();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "accumulationBehaviour", lhsAccumulationBehaviour), LocatorUtils.property(thatLocator, "accumulationBehaviour", rhsAccumulationBehaviour), lhsAccumulationBehaviour, rhsAccumulationBehaviour)) {
                return false;
            }
        }
        {
            String lhsCommodity;
            lhsCommodity = this.getCommodity();
            String rhsCommodity;
            rhsCommodity = that.getCommodity();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "commodity", lhsCommodity), LocatorUtils.property(thatLocator, "commodity", rhsCommodity), lhsCommodity, rhsCommodity)) {
                return false;
            }
        }
        {
            Short lhsConsumptionTier;
            lhsConsumptionTier = this.getConsumptionTier();
            Short rhsConsumptionTier;
            rhsConsumptionTier = that.getConsumptionTier();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "consumptionTier", lhsConsumptionTier), LocatorUtils.property(thatLocator, "consumptionTier", rhsConsumptionTier), lhsConsumptionTier, rhsConsumptionTier)) {
                return false;
            }
        }
        {
            String lhsCurrency;
            lhsCurrency = this.getCurrency();
            String rhsCurrency;
            rhsCurrency = that.getCurrency();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "currency", lhsCurrency), LocatorUtils.property(thatLocator, "currency", rhsCurrency), lhsCurrency, rhsCurrency)) {
                return false;
            }
        }
        {
            String lhsDataQualifier;
            lhsDataQualifier = this.getDataQualifier();
            String rhsDataQualifier;
            rhsDataQualifier = that.getDataQualifier();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "dataQualifier", lhsDataQualifier), LocatorUtils.property(thatLocator, "dataQualifier", rhsDataQualifier), lhsDataQualifier, rhsDataQualifier)) {
                return false;
            }
        }
        {
            String lhsDefaultQuality;
            lhsDefaultQuality = this.getDefaultQuality();
            String rhsDefaultQuality;
            rhsDefaultQuality = that.getDefaultQuality();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "defaultQuality", lhsDefaultQuality), LocatorUtils.property(thatLocator, "defaultQuality", rhsDefaultQuality), lhsDefaultQuality, rhsDefaultQuality)) {
                return false;
            }
        }
        {
            String lhsFlowDirection;
            lhsFlowDirection = this.getFlowDirection();
            String rhsFlowDirection;
            rhsFlowDirection = that.getFlowDirection();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "flowDirection", lhsFlowDirection), LocatorUtils.property(thatLocator, "flowDirection", rhsFlowDirection), lhsFlowDirection, rhsFlowDirection)) {
                return false;
            }
        }
        {
            Long lhsIntervalLength;
            lhsIntervalLength = this.getIntervalLength();
            Long rhsIntervalLength;
            rhsIntervalLength = that.getIntervalLength();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "intervalLength", lhsIntervalLength), LocatorUtils.property(thatLocator, "intervalLength", rhsIntervalLength), lhsIntervalLength, rhsIntervalLength)) {
                return false;
            }
        }
        {
            String lhsKind;
            lhsKind = this.getKind();
            String rhsKind;
            rhsKind = that.getKind();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "kind", lhsKind), LocatorUtils.property(thatLocator, "kind", rhsKind), lhsKind, rhsKind)) {
                return false;
            }
        }
        {
            String lhsPhase;
            lhsPhase = this.getPhase();
            String rhsPhase;
            rhsPhase = that.getPhase();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "phase", lhsPhase), LocatorUtils.property(thatLocator, "phase", rhsPhase), lhsPhase, rhsPhase)) {
                return false;
            }
        }
        {
            String lhsPowerOfTenMultiplier;
            lhsPowerOfTenMultiplier = this.getPowerOfTenMultiplier();
            String rhsPowerOfTenMultiplier;
            rhsPowerOfTenMultiplier = that.getPowerOfTenMultiplier();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "powerOfTenMultiplier", lhsPowerOfTenMultiplier), LocatorUtils.property(thatLocator, "powerOfTenMultiplier", rhsPowerOfTenMultiplier), lhsPowerOfTenMultiplier, rhsPowerOfTenMultiplier)) {
                return false;
            }
        }
        {
            String lhsTimeAttribute;
            lhsTimeAttribute = this.getTimeAttribute();
            String rhsTimeAttribute;
            rhsTimeAttribute = that.getTimeAttribute();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "timeAttribute", lhsTimeAttribute), LocatorUtils.property(thatLocator, "timeAttribute", rhsTimeAttribute), lhsTimeAttribute, rhsTimeAttribute)) {
                return false;
            }
        }
        {
            Short lhsTou;
            lhsTou = this.getTou();
            Short rhsTou;
            rhsTou = that.getTou();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "tou", lhsTou), LocatorUtils.property(thatLocator, "tou", rhsTou), lhsTou, rhsTou)) {
                return false;
            }
        }
        {
            String lhsUom;
            lhsUom = this.getUom();
            String rhsUom;
            rhsUom = that.getUom();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "uom", lhsUom), LocatorUtils.property(thatLocator, "uom", rhsUom), lhsUom, rhsUom)) {
                return false;
            }
        }
        {
            Short lhsCpp;
            lhsCpp = this.getCpp();
            Short rhsCpp;
            rhsCpp = that.getCpp();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "cpp", lhsCpp), LocatorUtils.property(thatLocator, "cpp", rhsCpp), lhsCpp, rhsCpp)) {
                return false;
            }
        }
        {
            ReadingInterharmonic lhsInterharmonic;
            lhsInterharmonic = this.getInterharmonic();
            ReadingInterharmonic rhsInterharmonic;
            rhsInterharmonic = that.getInterharmonic();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "interharmonic", lhsInterharmonic), LocatorUtils.property(thatLocator, "interharmonic", rhsInterharmonic), lhsInterharmonic, rhsInterharmonic)) {
                return false;
            }
        }
        {
            String lhsMeasuringPeriod;
            lhsMeasuringPeriod = this.getMeasuringPeriod();
            String rhsMeasuringPeriod;
            rhsMeasuringPeriod = that.getMeasuringPeriod();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "measuringPeriod", lhsMeasuringPeriod), LocatorUtils.property(thatLocator, "measuringPeriod", rhsMeasuringPeriod), lhsMeasuringPeriod, rhsMeasuringPeriod)) {
                return false;
            }
        }
        {
            RationalNumber lhsArgument;
            lhsArgument = this.getArgument();
            RationalNumber rhsArgument;
            rhsArgument = that.getArgument();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "argument", lhsArgument), LocatorUtils.property(thatLocator, "argument", rhsArgument), lhsArgument, rhsArgument)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(java.lang.Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            String theAccumulationBehaviour;
            theAccumulationBehaviour = this.getAccumulationBehaviour();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "accumulationBehaviour", theAccumulationBehaviour), currentHashCode, theAccumulationBehaviour);
        }
        {
            String theCommodity;
            theCommodity = this.getCommodity();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "commodity", theCommodity), currentHashCode, theCommodity);
        }
        {
            Short theConsumptionTier;
            theConsumptionTier = this.getConsumptionTier();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "consumptionTier", theConsumptionTier), currentHashCode, theConsumptionTier);
        }
        {
            String theCurrency;
            theCurrency = this.getCurrency();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "currency", theCurrency), currentHashCode, theCurrency);
        }
        {
            String theDataQualifier;
            theDataQualifier = this.getDataQualifier();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "dataQualifier", theDataQualifier), currentHashCode, theDataQualifier);
        }
        {
            String theDefaultQuality;
            theDefaultQuality = this.getDefaultQuality();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "defaultQuality", theDefaultQuality), currentHashCode, theDefaultQuality);
        }
        {
            String theFlowDirection;
            theFlowDirection = this.getFlowDirection();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "flowDirection", theFlowDirection), currentHashCode, theFlowDirection);
        }
        {
            Long theIntervalLength;
            theIntervalLength = this.getIntervalLength();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "intervalLength", theIntervalLength), currentHashCode, theIntervalLength);
        }
        {
            String theKind;
            theKind = this.getKind();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "kind", theKind), currentHashCode, theKind);
        }
        {
            String thePhase;
            thePhase = this.getPhase();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "phase", thePhase), currentHashCode, thePhase);
        }
        {
            String thePowerOfTenMultiplier;
            thePowerOfTenMultiplier = this.getPowerOfTenMultiplier();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "powerOfTenMultiplier", thePowerOfTenMultiplier), currentHashCode, thePowerOfTenMultiplier);
        }
        {
            String theTimeAttribute;
            theTimeAttribute = this.getTimeAttribute();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "timeAttribute", theTimeAttribute), currentHashCode, theTimeAttribute);
        }
        {
            Short theTou;
            theTou = this.getTou();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "tou", theTou), currentHashCode, theTou);
        }
        {
            String theUom;
            theUom = this.getUom();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "uom", theUom), currentHashCode, theUom);
        }
        {
            Short theCpp;
            theCpp = this.getCpp();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "cpp", theCpp), currentHashCode, theCpp);
        }
        {
            ReadingInterharmonic theInterharmonic;
            theInterharmonic = this.getInterharmonic();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "interharmonic", theInterharmonic), currentHashCode, theInterharmonic);
        }
        {
            String theMeasuringPeriod;
            theMeasuringPeriod = this.getMeasuringPeriod();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "measuringPeriod", theMeasuringPeriod), currentHashCode, theMeasuringPeriod);
        }
        {
            RationalNumber theArgument;
            theArgument = this.getArgument();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "argument", theArgument), currentHashCode, theArgument);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public ReadingType withAccumulationBehaviour(String value) {
        setAccumulationBehaviour(value);
        return this;
    }

    public ReadingType withCommodity(String value) {
        setCommodity(value);
        return this;
    }

    public ReadingType withConsumptionTier(Short value) {
        setConsumptionTier(value);
        return this;
    }

    public ReadingType withCurrency(String value) {
        setCurrency(value);
        return this;
    }

    public ReadingType withDataQualifier(String value) {
        setDataQualifier(value);
        return this;
    }

    public ReadingType withDefaultQuality(String value) {
        setDefaultQuality(value);
        return this;
    }

    public ReadingType withFlowDirection(String value) {
        setFlowDirection(value);
        return this;
    }

    public ReadingType withIntervalLength(Long value) {
        setIntervalLength(value);
        return this;
    }

    public ReadingType withKind(String value) {
        setKind(value);
        return this;
    }

    public ReadingType withPhase(String value) {
        setPhase(value);
        return this;
    }

    public ReadingType withPowerOfTenMultiplier(String value) {
        setPowerOfTenMultiplier(value);
        return this;
    }

    public ReadingType withTimeAttribute(String value) {
        setTimeAttribute(value);
        return this;
    }

    public ReadingType withTou(Short value) {
        setTou(value);
        return this;
    }

    public ReadingType withUom(String value) {
        setUom(value);
        return this;
    }

    public ReadingType withCpp(Short value) {
        setCpp(value);
        return this;
    }

    public ReadingType withInterharmonic(ReadingInterharmonic value) {
        setInterharmonic(value);
        return this;
    }

    public ReadingType withMeasuringPeriod(String value) {
        setMeasuringPeriod(value);
        return this;
    }

    public ReadingType withArgument(RationalNumber value) {
        setArgument(value);
        return this;
    }

    @Override
    public ReadingType withBatchItemInfo(BatchItemInfo value) {
        setBatchItemInfo(value);
        return this;
    }

    @Override
    public ReadingType withExtensions(java.lang.Object... values) {
        if (values!= null) {
            for (java.lang.Object value: values) {
                getExtensions().add(value);
            }
        }
        return this;
    }

    @Override
    public ReadingType withExtensions(Collection<java.lang.Object> values) {
        if (values!= null) {
            getExtensions().addAll(values);
        }
        return this;
    }

}
